<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAAAIADbGAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAZi
        S0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAOxAAADsQBlSsOGwAAGHtJREFUeJzt3XuQHVWdwPFv37nzTiYh
        CQEChIAooLwUBAFFwVUoUXBbESgVOYIuaiECiixLwPW16+7Wbrm1L0urWl23dnHXU0utf6j78IWrrg+i
        +ABBwisoBvJiknne2/vHr2/mJkySmb597+k+5/epupVkmD73x8w9v/716XNOg1JKKaWUUkoppZRSSiml
        lFJKKaWUUkoppZRSSimlqiRyHYByxNhh4Ebg4yRx6joc5UbNdQDKmdcBHwXOdh2IckcTQIiMHQBuzf71
        fpehKLc0AYTpMuCU7O+vw9jTXQaj3NEEEBpjh5g7+wP0AR90FI1yTBNAeN4GHL/X116Psae6CEa5pQkg
        JMYuYf6zfR34QI+jUSWgCSAs7wSO3sd/uxRjT+xlMMo9TQChMHYFcNN+vqMfrQKCowkgHO8B1hzgey7D
        2ON6EYwqB00AITD2EOC9C/jOQfZfJSjPaAIIw43AqgV+71sw9nndDEaVhyYA3xl7FPCuRRzRWiOgAqAJ
        wH83A0sXecxbMfY53QhGlYsmAJ9JKX9VjiNH0CogCJoA/LYe6cx5vA1j9zVnQHlCE4CvjD0FWfST1yha
        BXhPE4C/7kAm93TiqmwQUXlKE4CPjD0HeH0BLS1BqwCvaQLw0+0Ut92bwdi1BbWlSkYTgG+MfTXw6gJb
        XArcUGB7qkR0U1CfGFsDvk3x+/ztAE4kiR8ruF3lmFYAfnk93dnkcwytArykFYAvZKPPHwAnd+kdtgMn
        aRXgF60A/HEF3ev8AMvQKsA7WgH4wNgR4CfAsV1+Jx0L8IxWAH64hu53ftCxAO9oBVB1xh4E3Asc3qN3
        3IGMBTzao/dTXaQVQPW9l951fpAq4H09fD/VRVoBVJmxhwE/A1b0+J11LMATWgFU2830vvODVAG6RsAD
        WgFUlbHHAD9Flu268AxSBehYQIVpBVBd63HX+UHWCOgOwhWnFUAVGXsyMutvwHEk40gV8IjjOFROWgFU
        0x247/yg+wVUnlYAVSObfXyb8vzuxoGTSeKNrgNRi6cVQPXcQXk6P0gV8H7XQah8yvRBUgdi7EXAl12H
        MY9dwCkk8YOuA1GLoxVAVRhbBz7kOox9GEGrgErSBFAdbwJOdx3EflyJsc91HYRaHE0AVWDsMHCb6zAO
        YBj4oOsg1OJoAqiGq4ETXAexAG/G2ONdB6EWThNA2cly31tch7FAQ1QnVoUmgCq4jt4u9+3U5Rj7AtdB
        qIXRBFBmxq6hemvvB4FbXQehFkYTQLndAhzkOogcLsXYU10HoQ5ME0BZGXscMvhXRf3AH7oOQh2YJoDy
        ug2ZYFNVMcae5joItX+aAMrI2DOAy12H0aE6smeBKjFNAOX0YaQDVd3F2epFVVKaAMrG2FcBF7gOoyAR
        5Z/BGDRdDVgmxvYBdwMvcR1KwV5BEn/TdRDq2bQCKJfL8K/zA9zuOgA1P60AykKe7/dj4DjXoXTJBSTx
        11wHofakFUB5XI2/nR/gdozVz1vJ6C+kDIxdgf+LaM4BXus6CLUnTQDlcAOwxnUQPbA+29lIlYQmANeM
        XYs84DMEpwNvcB2EmqMJwL31yLP2QrEeYwddB6GEJgCXjD0JuNJ1GD32AuAK10EooQnArY9Qjif89Nqt
        2W1P5ZgmAFeMfQVwieswHHku8HbXQSidCOSG3A//JvBS16E49ChwEkm8w3UgIdMKwI1LCbvzA6wF3u06
        iNBpBdBrssf/Pfg962+hnkSqgM2uAwmVVgC9dw3a+VsOAa53HUTItALoJWNXAvcCh7kOpUS2IVXA464D
        CZFWAL31QbTz7205cLPrIEKlFUCvGHsM8BNgietQSmgCebz4A64DCY1WAL2zHu38+zIM/JHrIEKkFUAv
        GHs68F382OizW2aBF5PEG1wHEhKtAHrj42jnP5A6cIfrIEKjFUC3GXsxcJfrMCoiBc4lie92HUgotALo
        JmMHgI+6DqNCIuCPXQcREk0A3XUVcJLrICrmfIy9yHUQodBLgG4xdjky6ecI16FU0I+As0jiGdeB+E4r
        gO65Hu38eZ1G9Z+NWAlaAXSDsUciZ/9lrkOpsPuBF5LEE64D8ZlWAN1xO9r5O3UcsnBKdZFWAEUz9kXA
        94B+16F44AlkodAW14H4SiuA4n0M7fxFWQO8z3UQPtMKoEjGXgB8xXUYntHlwl2kFUBR5NHeH3EdhoeW
        A7e6DsJXmgCK82bgxa6D8JTB2BNcB+EjTQBFMHYJ8CHXYXhsCLmzogqmCaAY1wJHuw7Cc5di7Bmug/CN
        JoBOGXsostWX6q4+4MOug/CNJoDOfQBY5TqIQFyQ3WlRBdHbgJ0w9lhgAzDqOpSA/B9wNknccB2ID7QC
        6MztaOfvtTOAy1wH4QutAPLSff5cug9ZKDTpOpCq0wogvw+hnd+V4wHjOggfaAWQh7HnAf/jOozAPQac
        qE8X7oxWAIslj/bWKb/uHQlc5zqIqtMEsHiXAOe4DkIB8D6MPcR1EFWmCWAxjK2jU1LLZBVwk+sgqkwT
        wOJcAZzqOgi1h2sxdp3rIKpKE8BCGTuELksto6XoVOzcNAEs3FXI7SdVPldh7PNdB1FFmgAWwlg9y5Tb
        EHCb6yCqSBPAwlwNrHMdhNqvSzH2NNdBVI0mgAMxdhlwo+sw1AHV0Spg0TQBHNg7kEknqvwuxtizXQdR
        JZoA9kfO/te7DkMtWA1Y7zqIKtEEsH/vQJ/vVzUXYuzLXQdRFZoA9kXP/lWmVcACaQLYt2vQs39VvRJj
        X+U6iCrQBDAf2eZbV5pVm94RWABNAPN7C3CU6yBUR87F2AtdB1F2mgD2JnP+b3AdhiqErt04AE0Az/ZG
        4Hmug1CFeBnGvtp1EGWmCaCdsf3o+nLf3OI6gDLTBLCnC9H1/r45D2PPdx1EWWkC2JNe+/tJq4B90F2B
        W4w9C/gO+jPxUQqcSxLf7TqQstEKYM71aOf3VQTc7DqIMtIPPICxzwHuBYZdh6K6pgGcSRL/yHUgZaIV
        gLga7fy+60P3dXgWrQBk0c8vgDWuQ1FdNwmcTBI/4DqQstAKQCb+aOcPwxDwbtdBlEnYFYCxEfA95JHT
        KgxbgOeTxE+6DqQMQq8AXgK82HUQqqdWoE8W3i30BHA1oVdBYfoDjB11HUQZhJsAjF0NxK7DUE6sQ3/3
        QMgJAN4AHOQ6COXMu7IxoKCFmQDkF/8W12Eop85CH/MeaAKAU9CRfwXXug7AtVATwOXIk2RU2C7B2KA3
        fg0vARg7iFz/K7UEeLPrIFwKLwHItd+xroNQpXFlthNUkEJMAJe6DkCVyvOBYJ8kFFYCMHYEuMh1GKp0
        rnIdgCthJQA4E93vXz3bRRh7iOsgXAgtAVziOgBVSsuBi10H4UI4CUAGenSPeLUvV7gOwIVwEgCcDBzn
        OghVWudgbHAPhAkpAbySsP5/1eIMEOBlQEgdQh8XrQ7k910H0GthJABjVwEvch2GKr3TMTaoy8QwEoDs
        +rPCdRCq9AYIbKA4lATwMtcBqMp4resAeimUBPAS1wGoyjgzpElB/icAY1citwB7LIKoBlFf26uWvaK2
        v+/9Pdn36VaFriwjoI1CQlgTfwKwsjdvFUnnJoLmLMxOQWMSZiehOQPpLKRNeVRlBNCeDPqg1g99A/Kq
        DUKtniWDFNJU/lS98ErAug6iF0JIAKd0/y2yTpw2YGo7TG2D6Z3QnJavtX/fs8zTqaMaRHXoG4T+Eehf
        Av2jkhiIgGaWEFSXnI2xNZK46TqQbgshAZzW1dajPjnbT2yGiadgdgLp1K2ze1++dtNZmJmBmWeA30l1
        0D8Cg8tgYEySA5FUFFoZFO14ZOfghxzH0XV+JwDZ/POE7jSelftTW2F8U9bxs0qgyPZb0tm56qLWDwNL
        YWiF/BnV0aqgUEPIiUMTQMUtQzJ5saKanHmfeQx2bc6+lvNMv/A3nUsIaQMmt8DkVqgPSyIYWpFVBWlW
        FagOnQn8q+sgus33BLAGWFVoi1FNSv7tD8kZuebiR9h2aTE7CeOPw64nJQkMr4L6CJoIOtbdS8eS8P02
        4DqKTHKtzr/tQZje4ajz7x1TlgzShiSBLffDjoflkmT3LUWVw7EYu8R1EN3m+6ejwN1/IrnG3r4RZsZ7
        UPIvVqsqaMqA5Jb7skQwmSUCnVewSIcCa10H0W2+J4B1hbUU1aTUnt5Wws7frpUI0rlE8Myj0JjJvq6J
        YIHqwNGug+i2EtSwXVXMQx+iPhnt3/W7bMS9Ctoqgl1PyqDhyGoYPljuIuwxP0Htg/fbx/teARzceRPZ
        rL7xTZ035UTbGMH4Jth6v8xXoIM5CuHwvgLwPQF0fgcgqkkpPTtR8QG1rMPPTsGOjbDtVzC9fW49gpqP
        948N8/03P9jR0VEkc/gnNuPNj6p112B6HLY+IIOas5NQ0/GBefRoDYk7VbmgzWtZZ4fXYHIzNKb8K5db
        Z/3Jp2U+w8jBMHKIjg/syfsE4MlpbZ8GOjo6bcrgmc9nxtZA4c7fyB2Dic3o+MBuvp8gvU8A+SfHRzWY
        3SUv76+Rsw7fmJa5A1vvlzUHOj6gE4HCFclsv5Cm07bGB2Z2ymzHbb+Wv4c7o9D7/2nvS5z8Uph+Bq/L
        /31pdfaprZIEhw6CkUNl4ZGuOvSKJoB5RVIOz06GPYW2NQ4w8ZRcEgytgOHVWSIIYrGR96OhmgDmE0Uy
        8t+cDTsBtER90tl3/U4GRYdWyIzCsq86jKJOq5WdRYVSVr5f44znOyxLAJT0g+1EtGci2HKfLImeGW/b
        +agkybJ1CTPTcf/VCqDiJnIf2ZgqMAyftC02mnxaxgn6R2FopWxXVsvuvPZ6q7LdOymn0vHHN0F9CJYu
        7WReQ84TSHX4ngB25D6yOVtgGD5qmyswPS4DprUBGByDweWSFGr97O6UhexqHGVFRrbzMmRtN2Bml1Qj
        U9tlH8XmDAwe0+H7sa3TBsrO9wTwdO4jazoRZsFaJXc6KwOGE0/LDsb1EdmzsD4i25XV6nPbpi9IljDS
        FLn70IBGQ5Jzc0rWNcxOQmNCBm3TBrv3ZWztqtxZ0nmqk4OrwPcE8JvcR9Y6m0QYpraqoDkjdw6mtrZ1
        yNYzD+ry7z3mFrRVCWl2Vk+zTp82oNn2J822gccsoeyxA3MqCbw+QIcJ4IlODq4C3xPA4/kOS9vKV5XP
        PLsaz8xkA3OL6ZTR3J9R29f2N1U5JUs0/Z1edTzW0dEV4HsC2Jj7yL4BvQVYqKiHP8+mDAC27lrk530C
        8P024MO5jkqzCiCqow/dqKj+UTqs4JrAI8UEU16+J4BHyDWZI5Xr1L5+nfZaRVEN6qN0mLy3kvsSsjp8
        TwC/Je9ATtQHfUNoBVAxaSoDuPWhTpP3I8CWgqIqLb8TQBJPA7/KfXx9pLhYVI802+YgdJQAfh7Cw0H9
        TgDinnyHpdA/jN4JqKCBsSJa+VERjZRdCAngB7mOSlPoGy7iTKJ6Jhu8HVhSxAKlDUVEVHYhJIB7yDsQ
        2NcvVYAOBFZDmpX/xcwAvLeYoMothATwOPDzfIdG0L8UrQAqZHA5BVy23UMSez8ACCEkgCROgbvzHZzK
        XPYAfkzVl43+D4wVUf5/u4iIqiCUT/Z/5joqbcruN/Wh8m56oUTalOXInZf/KfBfxQRVfqEkgO8Dm3Md
        GfXJB0svA0quJjsVdf57epjcd46qJ4wEkMRbgW/kOziV68owd8WthtbgX38ho/9fJ4kniwirCkL6VN+V
        66i0KROC+kf1MqC0UhheWVSS/lIRjVRFSAngq+Sd2hnVZMsrvQwon9Z8jaGDikjQm4BvFRBVZYSTAJL4
        KeAruY5Nm3IZ0DeocwJKpynPNSxm5eZdJLH3+wC2CycBiM/nOyybYTa0Et0puER2n/1XFHV5lvPzUV2h
        JYBvkHdxUNqE4VU6NbhUmjC6uqjfyQ+zV1DCSgBJPAV8Lt/BqVwCDK/SwcAyaI38D60s6nHmnyGJvX8O
        wN7CSgDi8+TdLjxtyqOxagM6FlAGo2uKeoz5k8CdRTRUNeElgCR+HPjnfAenslfg6KHoWIBDaUOu+weX
        F3X2T0hi758BMJ/wEoD4JDCd68jWWEAxk07UomUDskvWUNBYzDjwD0U0VEVhJoAk/iW5J3ykMi9gyRG6
        a7ALaROWHC7btRWTgL9AEnu/+ee+hJkAxJ8AM7mOTJuySnDkkKJKULUQrdJ/eFVRP/edwF8U0VBVhZsA
        kvhe4J9yH582YfQw2S9Ak0D3pU056y89kgJvw36GJP51UY1VUbgJQHyU3M+Azy4Fxtbq3ICuS+Vya+yo
        Iu/APAX8aRENVVnYCUCy/ydzH99aKDS2tqCn36p5pU0ZcxkYK7La+gRJ/NuiGquqsBOA+DPg0dxHpw0Y
        XCEDU3pXoHjNWRlrGVldZOf/BfB3RTVWZZoAkng7cHNHbaRNmRugg4LFShuyzHfJEUVPvLqRJN5VZINV
        pQkAIInvBP4jfwPZI62XHglDhY1Qhy1twMAyGFuX7fFZWAL4Akn81aIaqzpNAHOuR54Hl1OWBMaOKnJ+
        ephanX/5MTLQWtzZfxPw/qIa84EmgJYk3gh8oLNGsg/qsnWyZkCTwOKlDZniu/yYIh7vvbf3ksRPFtlg
        1elUtr0Z+0Xg0s4aieS21fgTsPOJbKsq/VEfUNqQ6mnsKPn5FXvd/2mS+J1FNugDrQCe7T3Axs6aSOem
        rI6tAyK9Q7Bf6dzEqrGjkZ9XoZ3/XuCmIhv0hZ6W5mPsS4H/BgY6bivqg5lx2PEwzE4UtXzVH2lTfiZL
        j2zba6HQzj8OnEsSB7PV92Lop3E+G+58lBdetg14TeeNZRuJDK2A5gzM7mT3JULo0oZs6rHsOUUu7d3b
        O3TUf9/0U7g/xn4auKaQtqIIqMHkUzC+CRrT4VYDaVM+ecOrZVlv8YN9LX9OEnc2x8NzddcBlNx7gGOA
        8ztuKU2BhswT6F8qg4MTW9i9piAI6dz06aVHyK2+tNmtzm+BW7rRsE+0AjgQYw9Gni14SmFttqqB6R1y
        p2DmGeSywNdEkHX8Wn82rTfbxrt7t0m/D/xeaFt856EJYCGMPQZ5YOTRhbbbmuQytRV2Ptk2PuBLIkjn
        BvmGV0rn372RR9cWTv0SOE/v9y+MJoCFMvZkJAkcXHjbUZ+cDSe3wsRmmMlWKFc1EaQp0IRaPdvA42Ap
        +2l2ezPVXwMXksQPdvNNfKIJYDGMPRP4MrCq+MazM3/alEuDiafkz7RBNaqCdO5avj4kKySHV8oZv/2/
        dc+DwGtI4ge6/UY+0QSwWJIE7gIO6dp7RH1AKvMGprbC5DaYnUR2Ii5TMmjr2LV+GdwcOggGx7JHdXX9
        jN+inT8nTQB5GHsSMsp8bFffpzWFOG3IZcHUdqkKGpNZx2vNJ+jVrzFt2/gkkt15BkZlNH9gqWyZvnvW
        Y882R/kZcAlJ/FCv3tAnmgDyMnYd8G/AaT15v/ZkMDsB08/IDMPZCZlgtLvELiIppG1n7nTu/Wv9UtL3
        j8q26P0jcp1PRA/P9u2+A7xBB/zy0wTQCWNXIBuLXtjT9929uCiVHXMakzCzS5LB7CQ0p+XrizoTZ0kj
        iqRTR3U5o/cNyjV9fVj+Xeufe2+326DdCVyjt/o6owmgU8bWgb8ErnMTwF5n/LQJ6Sw0ZqQyaE5nfzbm
        qoTWPIQoe9XqMu5Qq8+9or69VjE67/DtPkES6ySfAmgCKIqx1wJ/BQy5DmXPtQYL/RW3lfxp+79LZTtw
        HUn8j64D8YUmgCIZezbwGeAE16F46MfA1STxBteB+KQs95P8kMT/C7wM+KzjSHzzt8ArtPMXTyuAbjH2
        cuSxU4e7DqXCNgI3kMR3uQ7EV1oBdEsS/wtwBqDXq/l8CjhTO393aQXQC8ZegjyG7ETXoVTAD4DbSOKv
        uQ4kBJoAesXYUWR/gZuA1Y6jKaMnkGf1fYoknnYdTCg0AfSasUcCNwBvB5Y5jqYMtgJ/D/y1zujrPU0A
        rhh7LDJ56EpgueNoXHga+BzwN9kzGZQDmgBcM/ZoZN/BtxHGHYOHgAT4LEn8uOtgQqcJoCyMXQm8EXgr
        cI7jaIrWBL4FfB74Ekm8w3E8KqMJoIyMPQt4E3AxsilpVT0A/DvwRZL4h66DUc+mCaDM5M7BuUgiOB94
        ntuAFuTnyENV7gK+SxJPOI5H7YcmgKowdgjZmfg84OXAqcChTmMSm4ANwNeBbwA/IYlnnUakFkwTQFUZ
        exBwPPAiZFOSk4C1yH6F3ZjhOQtsQQbxfoosztkA3EcSb+/C+6ke0ATgE9mg5HBgHZIM1gKHITsZLwdG
        s1df9qohA3SN7LUze20BNgO/AR4FHsleT5DEW3v2/6OUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJK
        KaX28P+kmahLN41XBwAAAABJRU5ErkJggg==
</value>
  </data>
</root>